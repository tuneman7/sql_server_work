{
   "servers": {
      "mssql": {
         "mssql1": {
            "dbs": {
               "products": {
                  "schemas": {
                     "dbo": {
                        "tables": {
                           "dbo.product_type.sql": "/data/school/MIDS/sql_server_work/dbs/servers/mssql/mssql1/dbs/products/schemas/dbo/tables/dbo.product_type.sql",
                           "dbo.product_type.sql_content": "use products;\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[product_type]') AND type in (N'U'))\nDROP TABLE [dbo].[product_type]\nGO\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[product_type](\n\t[id] [int] IDENTITY(1,1) NOT NULL,\n\t[product_type_desc] [char](100) NULL,\n\t[create_dt] [datetime] default GETDATE(),\n\t[created_by] [char](100) default SYSTEM_USER,\n\t[update_dt] [datetime] NULL,\n\t[updated_by] [char](100) NULL\n) ON [PRIMARY]\nGO\nALTER TABLE [dbo].[product_type] ADD PRIMARY KEY CLUSTERED \n(\n\t[id] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\nGO\n\n-- Create a trigger on the 'product_type' table\nCREATE TRIGGER tr_ProductType_Update\nON product_type\nAFTER UPDATE\nAS\nBEGIN\n\n    -- Update the 'update_dt' field with the current date and time\n    UPDATE product_type\n    SET update_dt = GETDATE(),\n    updated_by = SYSTEM_USER\n    FROM product_type pt\n    INNER JOIN inserted i ON pt.id = i.id\nEND;\n",
                           "dbo.products.sql": "/data/school/MIDS/sql_server_work/dbs/servers/mssql/mssql1/dbs/products/schemas/dbo/tables/dbo.products.sql",
                           "dbo.products.sql_content": "use products;\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[products]') AND type in (N'U'))\nDROP TABLE [dbo].[products]\ngo\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[products](\n\t[id] [int] IDENTITY(1,1) NOT NULL,\n\t[product_name] [varchar](100) NULL,\n\t[product_type_id] [int] NULL,\n\t[created_by] [char](100) NULL DEFAULT system_user,\n\t[created_dt] [datetime] NULL,\n\t[updated_by] [char](100) NULL,\n\t[updated_dt] [datetime] NULL,\n\tparent_product_id int NULL\n) ON [PRIMARY]\nGO\nALTER TABLE [dbo].[products] ADD PRIMARY KEY CLUSTERED \n(\n\t[id] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\nGO\nALTER TABLE [dbo].[products] ADD  DEFAULT (getdate()) FOR [created_dt]\nGO\nALTER TABLE products\nADD CONSTRAINT FK_ProductType\nFOREIGN KEY (product_type)\nREFERENCES product_type(id);\ngo\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n-- Create the trigger to update updated_dt\nCREATE TRIGGER [dbo].[UpdateProducts]\nON [dbo].[products]\nAFTER UPDATE\nAS\nBEGIN\n    UPDATE products\n    SET updated_dt = GETDATE(),\n\tupdated_by = system_user\n    FROM products\n    INNER JOIN inserted ON products.id = inserted.id;\nEND;\nGO\nALTER TABLE [dbo].[products] ENABLE TRIGGER [UpdateProducts]\nGO\n",
                           "dbo.product_price_history.sql": "/data/school/MIDS/sql_server_work/dbs/servers/mssql/mssql1/dbs/products/schemas/dbo/tables/dbo.product_price_history.sql",
                           "dbo.product_price_history.sql_content": "use products;\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[product_price_history]') AND type in (N'U'))\nDROP TABLE [dbo].[product_price_history]\ngo\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[product_price_history](\n\t[id] [int] IDENTITY(1,1) NOT NULL,\n\tproduct_id int not null,\n\tusd_price money not null,\n\t[pricing_start_dt] [datetime] not NULL,\n\t[pricing_end_dt] [datetime] not NULL,\n\t[created_by] [char](100) NULL DEFAULT system_user,\n\t[created_dt] [datetime] NULL default getdate(),\n\t[updated_by] [char](100) NULL,\n\t[updated_dt] [datetime] NULL\n) ON [PRIMARY]\nGO\nALTER TABLE [dbo].[product_price_history] ADD PRIMARY KEY CLUSTERED \n(\n\t[id] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\nGO\nALTER TABLE product_price_history\nADD CONSTRAINT FK_product_price_history_product\nFOREIGN KEY (product_id)\nREFERENCES products(id);\ngo\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n-- Create the trigger to update updated_dt\nCREATE TRIGGER [dbo].[Updateproduct_price_history]\nON [dbo].[product_price_history]\nAFTER UPDATE\nAS\nBEGIN\n    UPDATE product_price_history\n    SET updated_dt = GETDATE(),\n\tupdated_by = system_user\n    FROM product_price_history\n    INNER JOIN inserted ON product_price_history.id = inserted.id;\nEND;\nGO\nALTER TABLE [dbo].[product_price_history] ENABLE TRIGGER [Updateproduct_price_history]\nGO\n",
                           "dbo.product_price.sql": "/data/school/MIDS/sql_server_work/dbs/servers/mssql/mssql1/dbs/products/schemas/dbo/tables/dbo.product_price.sql",
                           "dbo.product_price.sql_content": "use products;\nIF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[product_price]') AND type in (N'U'))\nDROP TABLE [dbo].[product_price]\ngo\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\nCREATE TABLE [dbo].[product_price](\n\t[id] [int] IDENTITY(1,1) NOT NULL,\n\tproduct_id int not null,\n\tusd_price money not null,\n\t[pricing_start_dt] [datetime] not NULL,\n\t[pricing_end_dt] [datetime] not NULL,\n\t[created_by] [char](100) NULL DEFAULT system_user,\n\t[created_dt] [datetime] NULL default getdate(),\n\t[updated_by] [char](100) NULL,\n\t[updated_dt] [datetime] NULL\n) ON [PRIMARY]\nGO\nALTER TABLE [dbo].[product_price] ADD PRIMARY KEY CLUSTERED \n(\n\t[id] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\nGO\nALTER TABLE product_price\nADD CONSTRAINT FK_product_price_product\nFOREIGN KEY (product_id)\nREFERENCES products(id);\ngo\nSET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n-- Create the trigger to update updated_dt\nCREATE TRIGGER [dbo].[Updateproduct_price]\nON [dbo].[product_price]\nAFTER UPDATE\nAS\nBEGIN\n    UPDATE product_price\n    SET updated_dt = GETDATE(),\n\tupdated_by = system_user\n    FROM product_price\n    INNER JOIN inserted ON product_price.id = inserted.id;\nEND;\nGO\nALTER TABLE [dbo].[product_price] ENABLE TRIGGER [Updateproduct_price]\nGO\n"
                        }
                     }
                  },
                  "create_db": {
                     "create_db.sql": "/data/school/MIDS/sql_server_work/dbs/servers/mssql/mssql1/dbs/products/create_db/create_db.sql",
                     "create_db.sql_content": "CREATE DATABASE products;\n"
                  }
               }
            }
         }
      },
      "postsql": {
         "postsql1": {
            "dbs": {
               "finance": {
                  "schemas": {
                     "public": {
                        "tables": {
                           "geo_city_population.sql": "/data/school/MIDS/sql_server_work/dbs/servers/postsql/postsql1/dbs/finance/schemas/public/tables/geo_city_population.sql",
                           "geo_city_population.sql_content": "-- Connect to the \"finance\" database (if not already connected)\n\\c finance\n\nCREATE TABLE geo_city_population (\n    id serial PRIMARY KEY,\n    city_name VARCHAR(100),\n    population INT,\n    country VARCHAR(100) DEFAULT 'USA'\n);\n",
                           "fin_account_activity.sql": "/data/school/MIDS/sql_server_work/dbs/servers/postsql/postsql1/dbs/finance/schemas/public/tables/fin_account_activity.sql",
                           "fin_account_activity.sql_content": "-- Connect to the finance database\n\\c finance\n\n-- Create the fin_account_activity table\nCREATE TABLE fin_account_activity (\n    id serial PRIMARY KEY,\n    product_id INT NOT NULL,\n    customer_id INT,\n    account_id INT NOT NULL,\n    post_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    amt_usd money,\n    geo_geography_id INT,\n    fin_distro_channel_id INT,\n    fin_distro_partner_id INT,\n    created_by CHAR(100),\n    created_dt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_by CHAR(100),\n    updated_dt TIMESTAMP\n);\n\n-- Create a trigger function to update updated_by and updated_dt on any column update\nCREATE OR REPLACE FUNCTION update_fin_account_activity()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_by = current_user;\n    NEW.updated_dt = current_timestamp;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create a trigger on update of any column\nCREATE TRIGGER fin_account_activity_update_trigger\nBEFORE UPDATE ON fin_account_activity\nFOR EACH ROW\nEXECUTE FUNCTION update_fin_account_activity();",
                           "fin_gl_accounts.sql": "/data/school/MIDS/sql_server_work/dbs/servers/postsql/postsql1/dbs/finance/schemas/public/tables/fin_gl_accounts.sql",
                           "fin_gl_accounts.sql_content": "-- Connect to the finance database\n\\c finance\n\n-- Create the fin_gl_accounts table\nCREATE TABLE fin_gl_accounts (\n    id serial PRIMARY KEY,\n    account_code VARCHAR(20) NOT NULL,\n    account_name VARCHAR(255) NOT NULL,\n    account_type VARCHAR(50) NOT NULL,\n    created_by CHAR(100),\n    created_dt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_by CHAR(100),\n    updated_dt TIMESTAMP\n);\n\n-- Create a trigger function to update updated_by and updated_dt on any column update\nCREATE OR REPLACE FUNCTION update_fin_gl_accounts()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_by = current_user;\n    NEW.updated_dt = current_timestamp;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create a trigger on update of any column\nCREATE TRIGGER fin_gl_accounts_update_trigger\nBEFORE UPDATE ON fin_gl_accounts\nFOR EACH ROW\nEXECUTE FUNCTION update_fin_gl_accounts();",
                           "fin_distro_channel.sql": "/data/school/MIDS/sql_server_work/dbs/servers/postsql/postsql1/dbs/finance/schemas/public/tables/fin_distro_channel.sql",
                           "fin_distro_channel.sql_content": "-- Connect to the finance database\n\\c finance\n\n-- Create the fin_distro_channel table\nCREATE TABLE fin_distro_channel (\n    id serial PRIMARY KEY,\n    chnl_cd char(15),\n    channel_desc char(400),\n    created_by CHAR(100),\n    created_dt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_by CHAR(100),\n    updated_dt TIMESTAMP\n);\n\n-- Create a trigger function to update updated_by and updated_dt on any column update\nCREATE OR REPLACE FUNCTION update_fin_distro_channel()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_by = current_user;\n    NEW.updated_dt = current_timestamp;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create a trigger on update of any column\nCREATE TRIGGER fin_distro_channel_update_trigger\nBEFORE UPDATE ON fin_distro_channel\nFOR EACH ROW\nEXECUTE FUNCTION update_fin_distro_channel();\n\n--Some sentinal values\n--\"AIR\",\"TH\",\"STREAM\",\"STREAMRTL\",\"STREAMSUB\",\"MOBILE\",\"EDU\",\"MPUB\",\"HVID\",\"HVIDR\",\"EVNT\",\"HVIDDVD\"\n--\"Airlines\",\"Theatrical\",\"Streaming\",\"Streaming Rental\",\"Streaming Subscription\",\"Mobile\",\"Education\",\"Music Publishing\",\"Home Video\",\"Home Video Rentals\",\"Events\",\"Home Video DVD\"",
                           "geo_postalcode_to_county_state.sql": "/data/school/MIDS/sql_server_work/dbs/servers/postsql/postsql1/dbs/finance/schemas/public/tables/geo_postalcode_to_county_state.sql",
                           "geo_postalcode_to_county_state.sql_content": "-- Connect to the \"finance\" database (if not already connected)\n\\c finance\n\nCREATE TABLE geo_postalcode_to_county_state (\n    postalcode VARCHAR(20),\n    countyname varchar(80),\n    province varchar(60),\n    country VARCHAR(100) DEFAULT 'USA'\n);\n",
                           "geo_geography.sql": "/data/school/MIDS/sql_server_work/dbs/servers/postsql/postsql1/dbs/finance/schemas/public/tables/geo_geography.sql",
                           "geo_geography.sql_content": "-- Connect to the \"finance\" database (if not already connected)\n\\c finance\n\n-- Create the \"geo_geography\" table with columns\nCREATE TABLE geo_geography (\n    id serial PRIMARY KEY,\n    postalcode VARCHAR(10),\n    country VARCHAR(100),\n    location_name VARCHAR(100),\n    msa VARCHAR(100),\n    created_by CHAR(100),\n    created_dt TIMESTAMP DEFAULT current_timestamp,\n    updated_by CHAR(100),\n    updated_dt TIMESTAMP\n);\n\n-- Create a trigger function to update created_by, created_dt, updated_by, and updated_dt on any insert or update\nCREATE OR REPLACE FUNCTION update_geo_geography()\nRETURNS TRIGGER AS $$\nBEGIN\n    IF TG_OP = 'INSERT' THEN\n        NEW.created_by = current_user;\n        NEW.created_dt = current_timestamp;\n    ELSIF TG_OP = 'UPDATE' THEN\n        NEW.updated_by = current_user;\n        NEW.updated_dt = current_timestamp;\n    END IF;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create a trigger on insert or update of any column\nCREATE TRIGGER geo_geography_insert_update_trigger\nBEFORE INSERT OR UPDATE ON geo_geography\nFOR EACH ROW\nEXECUTE FUNCTION update_geo_geography();\n",
                           "fin_distro_partner.sql": "/data/school/MIDS/sql_server_work/dbs/servers/postsql/postsql1/dbs/finance/schemas/public/tables/fin_distro_partner.sql",
                           "fin_distro_partner.sql_content": "-- Connect to the finance database\n\\c finance\n\n-- Create the fin_distro_partner table\nCREATE TABLE fin_distro_partner (\n    id serial PRIMARY KEY,\n    partner_desc char(200) NOT NULL,\n    created_by CHAR(100),\n    created_dt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_by CHAR(100),\n    updated_dt TIMESTAMP\n);\n\n-- Create a trigger function to update updated_by and updated_dt on any column update\nCREATE OR REPLACE FUNCTION update_fin_distro_partner()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_by = current_user;\n    NEW.updated_dt = current_timestamp;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create a trigger on update of any column\nCREATE TRIGGER fin_distro_partner_update_trigger\nBEFORE UPDATE ON fin_distro_partner\nFOR EACH ROW\nEXECUTE FUNCTION update_fin_distro_partner();",
                           "fin_distro_channel_group.sql": "/data/school/MIDS/sql_server_work/dbs/servers/postsql/postsql1/dbs/finance/schemas/public/tables/fin_distro_channel_group.sql",
                           "fin_distro_channel_group.sql_content": "-- Connect to the finance database\n\\c finance\n\n-- Create the fin_distro_channel_group table\nCREATE TABLE fin_distro_channel_group (\n    id serial PRIMARY KEY,\n    group_desc CHAR(400),\n    fin_distro_channel_id INT,\n    created_by CHAR(100),\n    created_dt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_by CHAR(100),\n    updated_dt TIMESTAMP\n);\n\n-- Create a trigger function to update updated_by and updated_dt on any column update\nCREATE OR REPLACE FUNCTION update_fin_distro_channel_group()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_by = current_user;\n    NEW.updated_dt = current_timestamp;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create a trigger on update of any column\nCREATE TRIGGER fin_distro_channel_group_update_trigger\nBEFORE UPDATE ON fin_distro_channel_group\nFOR EACH ROW\nEXECUTE FUNCTION update_fin_distro_channel_group();",
                           "geo_population_by_postalcode.sql": "/data/school/MIDS/sql_server_work/dbs/servers/postsql/postsql1/dbs/finance/schemas/public/tables/geo_population_by_postalcode.sql",
                           "geo_population_by_postalcode.sql_content": "-- Connect to the \"finance\" database (if not already connected)\n\\c finance\n\nCREATE TABLE geo_population_by_postalcode (\n    postalcode VARCHAR(20),\n    population INT,\n    country VARCHAR(100) DEFAULT 'USA'\n);\n"
                        }
                     }
                  },
                  "create_db": {
                     "create_db.sql": "/data/school/MIDS/sql_server_work/dbs/servers/postsql/postsql1/dbs/finance/create_db/create_db.sql",
                     "create_db.sql_content": "CREATE DATABASE finance;"
                  }
               }
            }
         }
      },
      "mysql": {
         "mysql1": {
            "dbs": {
               "customers": {
                  "schemas": {
                     "customers": {
                        "tables": {
                           "customer_info.sql": "/data/school/MIDS/sql_server_work/dbs/servers/mysql/mysql1/dbs/customers/schemas/customers/tables/customer_info.sql",
                           "customer_info.sql_content": "DROP TABLE IF EXISTS customers.customer_info;\n\nCREATE TABLE customers.customer_info (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    f_name CHAR(100),\n    l_name CHAR(100),\n    email_address CHAR(200),\n    country CHAR(100),\n    postalcode CHAR(100),\n    city_name CHAR(100),\n    province CHAR(100),\n    created_by CHAR(100),\n    created_dt DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_by CHAR(100),\n    updated_dt DATETIME\n);\n\n\nUSE customers;\n\nDELIMITER //\n\nCREATE TRIGGER customers_before_update\nBEFORE UPDATE ON customers.customer_info FOR EACH ROW\nBEGIN\n    SET NEW.updated_by = CURRENT_USER();\n    SET NEW.updated_dt = CURRENT_TIMESTAMP;    \nEND;\n\n//\n\nDELIMITER ;\n\nDELIMITER //\n\nCREATE TRIGGER customers_insert_trigger\nBEFORE INSERT ON customers.customer_info\nFOR EACH ROW\nBEGIN\n    SET NEW.created_by = CURRENT_USER();\nEND;\n\n//\n\nDELIMITER ;\n",
                           "customer_product.sql": "/data/school/MIDS/sql_server_work/dbs/servers/mysql/mysql1/dbs/customers/schemas/customers/tables/customer_product.sql",
                           "customer_product.sql_content": "DROP TABLE IF EXISTS customers.customer_product;\n\nCREATE TABLE customers.customer_product (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    customer_id INT,\n    product_id INT,\n    product_type_desc CHAR(100),\n    purchase_dt DATETIME,\n    expiration_dt DATETIME,\n    created_by CHAR(100),\n    created_dt DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_by CHAR(100),\n    updated_dt DATETIME\n);\n\n\nUSE customers;\n\nDELIMITER //\n\nCREATE TRIGGER customer_product_before_update\nBEFORE UPDATE ON customers.customer_product FOR EACH ROW\nBEGIN\n    SET NEW.updated_by = CURRENT_USER();\n    SET NEW.updated_dt = CURRENT_TIMESTAMP;    \nEND;\n\n//\n\nDELIMITER ;\n\nDELIMITER //\n\nCREATE TRIGGER customer_product_insert_trigger\nBEFORE INSERT ON customers.customer_product\nFOR EACH ROW\nBEGIN\n    SET NEW.created_by = CURRENT_USER();\nEND;\n\n//\n\nDELIMITER ;\n",
                           "customer_product_history.sql": "/data/school/MIDS/sql_server_work/dbs/servers/mysql/mysql1/dbs/customers/schemas/customers/tables/customer_product_history.sql",
                           "customer_product_history.sql_content": "DROP TABLE IF EXISTS customers.customer_product_history;\n\nCREATE TABLE customers.customer_product_history (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    customer_id INT,    \n    product_id INT,\n    product_type_desc CHAR(100),\n    purchase_dt DATETIME,\n    expiration_dt DATETIME,    \n    created_by CHAR(100),\n    created_dt DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_by CHAR(100),\n    updated_dt DATETIME\n);\n\n\nUSE customers;\n\nDELIMITER //\n\nCREATE TRIGGER customer_product_history_before_update\nBEFORE UPDATE ON customers.customer_product_history FOR EACH ROW\nBEGIN\n    SET NEW.updated_by = CURRENT_USER();\n    SET NEW.updated_dt = CURRENT_TIMESTAMP;    \nEND;\n\n//\n\nDELIMITER ;\n\nDELIMITER //\n\nCREATE TRIGGER customer_product_history_insert_trigger\nBEFORE INSERT ON customers.customer_product_history\nFOR EACH ROW\nBEGIN\n    SET NEW.created_by = CURRENT_USER();\nEND;\n\n//\n\nDELIMITER ;\n"
                        }
                     }
                  },
                  "create_db": {
                     "create_db.sql": "/data/school/MIDS/sql_server_work/dbs/servers/mysql/mysql1/dbs/customers/create_db/create_db.sql",
                     "create_db.sql_content": "CREATE DATABASE customers;"
                  }
               }
            }
         }
      }
   }
}